library(readxl)
library(tibble)
library(dplyr)
library(tidyverse)
library(ggplot2)
# get counts for any passed column
get.count <- function(data, column) {
column <- enquo(column)  # Capture the column name
cnt <- data %>%
count(!!column)  # Unquote the column name
return(cnt)
}
custom_colors <- c("Movie" = "#db0000", "TV Show" = "#564d4d")
df <- read.csv("./files/netflix_titles.csv")
columns_to_delete <- grep("^X", names(df))
# Reason for deleting columns is that it makes additional columns after reading files.
# Columns are called X, X.1, X.2 and so on.
df <- df[, -columns_to_delete]
as_tibble(df)
#| label: fig-movies-and-tvshows-count
#| fig-cap: "Movie & TV Shows total count"
ggplot(df, aes(x = type, fill = type)) +
geom_bar() +
geom_text(stat='count', aes(label=..count..), position=position_stack(vjust=0.5), color="white") +
theme(legend.position = "none") +
scale_fill_manual(values = custom_colors)
#| label: fig-movies-and-tvshows-percentages
#| fig-cap: "Movie & TV Shows distribution of total per country in %"
df_summary <- df %>%
count(type) %>%
mutate(percentage = round(n / sum(n) * 100, 1))
ggplot(df_summary, aes(x = "", y = n, fill = type)) +
geom_bar(stat = "identity", width = 1) +
coord_polar(theta = "y") +
geom_text(aes(label = paste0(percentage, "%")),
position = position_stack(vjust = 0.5), color = "white") +
theme_void()+
scale_fill_manual(values = custom_colors)
#| label: tbl-top_n_countries
#| tbl-cap: "Top 15 countries with movies + TV-shows count"
# handling 'NA' values but in this dataset it is empty string
df <- df %>%
mutate(country = ifelse(country == "", "Unknown", country))
# some movies/shows have more countries
df_split <- df %>%
separate_rows(country, sep = ", ")
df_country_data = get.count(df_split,country) %>%
arrange(desc(n))
total_countries = sum(df_country_data$n)
df_country_data <- df_country_data %>%
mutate(perc = round((n / total_countries) * 100, 1))
# Get first 15 rows
df_country_data_display <- head(df_country_data, n = 15)
df_country_data_display <- df_country_data_display %>%
rownames_to_column(var = "Position")
# Display top 15 countries as a table
knitr::kable(df_country_data_display[, c("Position","country", "n", "perc")],
col.names = c("#","Country","Total (movies+shows)", "% of total"))
#| label: fig-distribution-over-countries-percentage
#| fig-cap: "Movie & TV Shows distribution over countries in %"
df_to_display <- df_split %>%
semi_join(df_country_data_display, by = "country") %>%
group_by(country) %>%
count(type)
df_to_display <- df_to_display %>%
group_by(country) %>%
mutate(total = sum(n))
df_to_display <- df_to_display %>%
group_by(country) %>%
mutate(perc = round((n/total *100),1))
ggplot(df_to_display, aes(fill=type, x=perc, y=country)) +
geom_bar(position="fill", stat="identity") +
geom_text(aes(label = paste0(perc, "%")), position = position_fill(vjust = 0.5), color = "white", size = 3) +
labs(title = "Percentage of Movies and TV Shows by Country",
x = "Percentage",
y = "Countries",
fill = "Type") +
scale_fill_manual(values = custom_colors) +
theme_minimal() +
theme(axis.text.x = element_blank(),  # Remove x-axis labels
axis.ticks.x = element_blank())  # Remove x-axis ticks
# make a plot with years on x axis and number of movies for decades
# Change to numeric value
df$year <- as.numeric(df$release_year) # Extract the year
# Duration extraction
df$duration_num <- as.numeric(str_extract(df$duration, "\\d+"))
df_groupedby_type <- df %>%
group_by(.$type)
# Filter out the Movies and group by year
df_movies <- df %>%
filter(type == "Movie") %>%
group_by(year)
df_shows <- df %>%
filter(type == "TV Show") %>%
group_by(year)
# Calculate the average duration of movies and series per year
df_avg_movie_duration <- df_movies %>%
summarise(avg_duration = mean(duration_num, na.rm = TRUE))
df_avg_series_duration <- df_shows %>%
summarise(avg_duration = mean(duration_num, na.rm = TRUE))
#| label: fig-movies
#| fig-cap: "Movies"
# Create the plot fot movies
ggplot(df_avg_movie_duration, aes(x=year, y=avg_duration)) +
geom_line() +
scale_x_continuous(breaks = seq(min(df_avg_movie_duration$year), max(df_avg_movie_duration$year), by = 7)) +
labs(x="Year", y="Average Duration (mins)", title="Average Movie Duration Over Time") +
theme_minimal()
#| label: fig-shows
#| fig-cap: "TV Show"
# Create the plot for series
ggplot(df_avg_series_duration, aes(x=year, y=avg_duration)) +
geom_line() +
scale_x_continuous(breaks = seq(min(df_avg_series_duration$year), max(df_avg_series_duration$year), by = 7)) +
labs(x="Year", y="Average Duration (seasons)", title="Average Series Duration Over Time") +
theme_minimal()
#| label: tbl-top_n_tvshows
#| tbl-cap: "Longest TV Shows and their genres"
top_n_tvshows <- df %>%
filter(type == "TV Show") %>%
arrange(desc(duration_num))
# Get first 5 rows
top_n_tvshows <- head(top_n_tvshows, n = 5)
# Display top N movies as a table
knitr::kable(top_n_tvshows[, c("title", "listed_in", "duration")],
col.names = c( "Title","Genre", "Duration"))
library(readxl)
library(tibble)
library(dplyr)
library(tidyverse)
library(ggplot2)
# get counts for any passed column
get.count <- function(data, column) {
column <- enquo(column)  # Capture the column name
cnt <- data %>%
count(!!column)  # Unquote the column name
return(cnt)
}
custom_colors <- c("Movie" = "#db0000", "TV Show" = "#564d4d")
df <- read.csv("./files/netflix_titles.csv")
columns_to_delete <- grep("^X", names(df))
# Reason for deleting columns is that it makes additional columns after reading files.
# Columns are called X, X.1, X.2 and so on.
df <- df[, -columns_to_delete]
as_tibble(df)
#| label: fig-movies-and-tvshows-count
#| fig-cap: "Movie & TV Shows total count"
ggplot(df, aes(x = type, fill = type)) +
geom_bar() +
geom_text(stat='count', aes(label=..count..), position=position_stack(vjust=0.5), color="white") +
theme(legend.position = "none") +
scale_fill_manual(values = custom_colors)
#| label: fig-movies-and-tvshows-percentages
#| fig-cap: "Movie & TV Shows distribution of total per country in %"
df_summary <- df %>%
count(type) %>%
mutate(percentage = round(n / sum(n) * 100, 1))
ggplot(df_summary, aes(x = "", y = n, fill = type)) +
geom_bar(stat = "identity", width = 1) +
coord_polar(theta = "y") +
geom_text(aes(label = paste0(percentage, "%")),
position = position_stack(vjust = 0.5), color = "white") +
theme_void()+
scale_fill_manual(values = custom_colors)
#| label: tbl-top_n_countries
#| tbl-cap: "Top 15 countries with movies + TV-shows count"
# handling 'NA' values but in this dataset it is empty string
df <- df %>%
mutate(country = ifelse(country == "", "Unknown", country))
# some movies/shows have more countries
df_split <- df %>%
separate_rows(country, sep = ", ")
df_country_data = get.count(df_split,country) %>%
arrange(desc(n))
total_countries = sum(df_country_data$n)
df_country_data <- df_country_data %>%
mutate(perc = round((n / total_countries) * 100, 1))
# Get first 15 rows
df_country_data_display <- head(df_country_data, n = 15)
df_country_data_display <- df_country_data_display %>%
rownames_to_column(var = "Position")
# Display top 15 countries as a table
knitr::kable(df_country_data_display[, c("Position","country", "n", "perc")],
col.names = c("#","Country","Total (movies+shows)", "% of total"))
#| label: fig-distribution-over-countries-percentage
#| fig-cap: "Movie & TV Shows distribution over countries in %"
df_to_display <- df_split %>%
semi_join(df_country_data_display, by = "country") %>%
group_by(country) %>%
count(type)
df_to_display <- df_to_display %>%
group_by(country) %>%
mutate(total = sum(n))
df_to_display <- df_to_display %>%
group_by(country) %>%
mutate(perc = round((n/total *100),1))
ggplot(df_to_display, aes(fill=type, x=perc, y=country)) +
geom_bar(position="fill", stat="identity") +
geom_text(aes(label = paste0(perc, "%")), position = position_fill(vjust = 0.5), color = "white", size = 3) +
labs(title = "Percentage of Movies and TV Shows by Country",
x = "Percentage",
y = "Countries",
fill = "Type") +
scale_fill_manual(values = custom_colors) +
theme_minimal() +
theme(axis.text.x = element_blank(),  # Remove x-axis labels
axis.ticks.x = element_blank())  # Remove x-axis ticks
# make a plot with years on x axis and number of movies for decades
# Change to numeric value
df$year <- as.numeric(df$release_year) # Extract the year
# Duration extraction
df$duration_num <- as.numeric(str_extract(df$duration, "\\d+"))
df_groupedby_type <- df %>%
group_by(.$type)
# Filter out the Movies and group by year
df_movies <- df %>%
filter(type == "Movie") %>%
group_by(year)
df_shows <- df %>%
filter(type == "TV Show") %>%
group_by(year)
# Calculate the average duration of movies and series per year
df_avg_movie_duration <- df_movies %>%
summarise(avg_duration = mean(duration_num, na.rm = TRUE))
df_avg_series_duration <- df_shows %>%
summarise(avg_duration = mean(duration_num, na.rm = TRUE))
#| label: fig-movies
#| fig-cap: "Movies"
# Create the plot fot movies
ggplot(df_avg_movie_duration, aes(x=year, y=avg_duration)) +
geom_line() +
scale_x_continuous(breaks = seq(min(df_avg_movie_duration$year), max(df_avg_movie_duration$year), by = 7)) +
labs(x="Year", y="Average Duration (mins)", title="Average Movie Duration Over Time") +
theme_minimal()
#| label: fig-shows
#| fig-cap: "TV Show"
# Create the plot for series
ggplot(df_avg_series_duration, aes(x=year, y=avg_duration)) +
geom_line() +
scale_x_continuous(breaks = seq(min(df_avg_series_duration$year), max(df_avg_series_duration$year), by = 7)) +
labs(x="Year", y="Average Duration (seasons)", title="Average Series Duration Over Time") +
theme_minimal()
#| label: tbl-top_n_tvshows
#| tbl-cap: "Longest TV Shows and their genres"
top_n_tvshows <- df %>%
filter(type == "TV Show") %>%
arrange(desc(duration_num))
# Get first 5 rows
top_n_tvshows <- head(top_n_tvshows, n = 5)
# Display top N movies as a table
knitr::kable(top_n_tvshows[, c("title", "listed_in", "duration")],
col.names = c( "Title","Genre", "Duration"))
